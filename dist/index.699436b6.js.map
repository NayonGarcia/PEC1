{"mappings":"ACmCA,GAnCA,SAAS,gBAAgB,CAAC,mBAAoB,WAC1C,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAa,SAAS,gBAAgB,CAAC,UAAU,MAAM,CACvD,EAAa,SAAS,aAAa,CAAC,SACpC,EAAa,SAAS,aAAa,CAAC,SACtC,EAAe,EAEnB,SAAS,EAAU,CAAK,EAEpB,EAAO,KAAK,CAAC,SAAS,CAAG,CAAC,WAAW,EADtB,CAAA,CAAA,AAAS,IAAR,CAAhB,EAC8C,GAAG,CAAC,AACtD,CAEA,SAAS,IAEL,EADA,EAAe,AAAC,CAAA,EAAe,CAAA,EAAK,EAExC,CAQA,EAAW,gBAAgB,CAAC,QAAS,GACrC,EAAW,gBAAgB,CAAC,QAP5B,WAEI,EADA,EAAgB,AAAA,CAAA,EAAe,EAAI,CAAA,EAAc,EAErD,GAOA,YAAY,EAAW,KAGvB,EAAU,EACd,GAII,YAAa,iBAAiB,SAAS,CAEvC,AADe,SAAS,gBAAgB,CAAC,uBAClC,OAAO,CAAC,AAAA,IACb,EAAI,GAAG,CAAG,EAAI,OAAO,CAAC,GAAG,AAC3B,OACK,CACL,IAAM,EAAS,SAAS,aAAa,CAAC,SACtC,CAAA,EAAO,GAAG,CACR,0EACF,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,CAiBF,MAAM,UAAoB,YACtB,mBAAoB,CAChB,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,WAEjC,IAAI,EAAY,IAAI,CAAC,aAAa,CAAC,6BAwBnC,GAtBA,IAAI,CAAC,SAAS,CAAG,GAAc,EAAU,WAAW,CAAC,IAAI,IAAO,IAAI,CAAC,YAAY,CAAC,cAAgB,OAElG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,UAAY,GAO9C,IAAI,CAAC,KAAK,CAAC,eAAe,GAC7B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAC1F,IAAI,CAAC,kBAAkB,IAIpB,IAED,AADA,CAAA,EAAY,SAAS,aAAa,CAAC,SAAnC,EACU,IAAI,CAAG,SAEjB,EAAU,SAAS,CAAC,GAAG,CAAC,cAAe,eACvC,IAAI,CAAC,MAAM,CAAC,IAEZ,CAAC,EAAU,WAAW,CAAE,CACxB,IAAM,EAAiB,SAAS,aAAa,CAAC,OAC9C,CAAA,EAAe,SAAS,CAAG,sBAC3B,EAAe,WAAW,CAAG,IAAI,CAAC,SAAS,CAC3C,EAAU,MAAM,CAAC,EACrB,CAEA,IAAI,CAAC,iBAAiB,GAGI,MAAvB,EAAU,QAAQ,GACjB,EAAU,eAAe,CAAC,QAC1B,EAAU,YAAY,CAAC,WAAY,KACnC,EAAU,YAAY,CAAC,OAAQ,UAE/B,EAAU,gBAAgB,CAAC,UAAW,AAAA,IAC9B,CAAA,AAAU,UAAV,EAAE,GAAG,EAAgB,AAAU,MAAV,EAAE,GAAG,AAAK,IAC/B,EAAE,cAAc,GAChB,IAAI,CAAC,QAAQ,GAErB,IAIJ,IAAI,CAAC,gBAAgB,CAAC,cAAe,EAAY,eAAe,CAAE,CAAC,KAAM,CAAA,CAAI,GAC7E,IAAI,CAAC,gBAAgB,CAAC,UAAW,EAAY,eAAe,CAAE,CAAC,KAAM,CAAA,CAAI,GAKzE,IAAI,CAAC,gBAAgB,CAAC,QAAS,IAAI,CAAC,QAAQ,EAM5C,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,YAAY,CAAC,WAAa,UAAU,MAAM,CAAC,QAAQ,CAAC,UAAY,UAAU,SAAS,CAAC,QAAQ,CAAC,OACxH,CAKA,OAAO,YAAY,CAAI,CAAE,CAAG,CAAE,CAAE,CAAE,CAC9B,IAAM,EAAS,SAAS,aAAa,CAAC,OACtC,CAAA,EAAO,GAAG,CAAG,EACb,EAAO,IAAI,CAAG,EACV,GACA,CAAA,EAAO,EAAE,CAAG,CADhB,EAGA,SAAS,IAAI,CAAC,MAAM,CAAC,EACzB,CAWA,OAAO,iBAAkB,CACjB,EAAY,YAAY,GAG5B,EAAY,WAAW,CAAC,aAAc,oCAEtC,EAAY,WAAW,CAAC,aAAc,0BAGtC,EAAY,WAAW,CAAC,aAAc,uCACtC,EAAY,WAAW,CAAC,aAAc,kCAEtC,EAAY,YAAY,CAAG,CAAA,EAC/B,CAEA,kBAAmB,CACX,OAAO,EAAE,EAAK,OAAO,EAAE,EAAI,OAAO,EAAE,CAAC,MAAM,EAE/C,CAAA,IAAI,CAAC,YAAY,CAAG,IAAI,QAAQ,CAAC,EAAK,KAClC,IAAI,EAAK,SAAS,aAAa,CAAC,SAChC,CAAA,EAAG,GAAG,CAAG,qCACT,EAAG,KAAK,CAAG,CAAA,EACX,EAAG,MAAM,CAAG,AAAA,IACR,GAAG,KAAK,CAAC,EACb,EACA,EAAG,OAAO,CAAG,EACb,IAAI,CAAC,MAAM,CAAC,EAChB,EAAA,CACJ,CAGA,MAAM,aAAc,CAKhB,OAJI,IAAI,CAAC,aAAa,EAClB,MAAM,IAAI,CAAC,QAAQ,GAGhB,IAAI,CAAC,aAAa,AAC7B,CAEA,MAAM,mBAAoB,CACtB,IAAI,CAAC,gBAAgB,GACrB,MAAM,IAAI,CAAC,YAAY,CAEvB,IAAM,EAAqB,SAAS,aAAa,CAAC,OAClD,IAAI,CAAC,MAAM,CAAC,GAEZ,IAAM,EAAY,OAAO,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,GAE7D,CAAA,IAAI,CAAC,aAAa,CAAG,IAAI,QAAQ,AAAA,IAC7B,IAAI,EAAS,IAAI,GAAG,MAAM,CAAC,EAAoB,CAC3C,MAAO,OACP,QAAS,IAAI,CAAC,OAAO,CACrB,WAAY,EACZ,OAAQ,CACJ,QAAW,AAAA,IACP,EAAM,MAAM,CAAC,SAAS,GACtB,EAAQ,EACZ,CACJ,CACJ,EACJ,EACJ,CAGA,mBAAoB,CAChB,IAAM,EAAW,IAAI,CAAC,iBAAiB,GACjC,EAAa,SAAS,aAAa,CAAC,WAE1C,CAAA,EAAW,SAAS,CAAG,EAAS,SAAS,CACzC,IAAI,CAAC,MAAM,CAAC,EAChB,CAEA,WAAY,CACR,IAAM,EAAS,IAAI,gBAAgB,IAAI,CAAC,YAAY,CAAC,WAAa,EAAE,EAGpE,OAFA,EAAO,MAAM,CAAC,WAAY,KAC1B,EAAO,MAAM,CAAC,cAAe,KACtB,CACX,CAEA,MAAM,UAAU,CACZ,GAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAkB,OAG9C,GAFA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAEf,IAAI,CAAC,UAAU,CACf,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,IAGhD,IAAM,EAAW,IAAI,CAAC,iBAAiB,GACvC,IAAI,CAAC,MAAM,CAAC,GAGZ,EAAS,KAAK,EAClB,CAEA,mBAAmB,CACf,IAAM,EAAW,SAAS,aAAa,CAAC,UAUxC,OATA,EAAS,KAAK,CAAG,IACjB,EAAS,MAAM,CAAG,IAElB,EAAS,KAAK,CAAG,IAAI,CAAC,SAAS,CAC/B,EAAS,KAAK,CAAG,0EACjB,EAAS,eAAe,CAAG,CAAA,EAG3B,EAAS,GAAG,CAAG,CAAC,uCAAuC,EAAE,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAA,CAAI,CACnH,CACX,CAUA,oBAAqB,CAEjB,WAAW,KACP,IAAM,EAAU,CAAC,4BAA4B,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CACtE,EAAM,IAAI,KAChB,CAAA,EAAI,aAAa,CAAG,MACpB,EAAI,cAAc,CAAG,SACrB,EAAI,GAAG,CAAG,EACV,EAAI,MAAM,CAAG,AAAA,IAI2C,IAA1B,EAAE,MAAM,CAAC,aAAa,EAAU,AAAyB,KAAzB,EAAE,MAAM,CAAC,YAAY,EAG/E,CAAA,IAAI,CAAC,KAAK,CAAC,eAAe,CAAG,CAAC,KAAK,EAAE,EAAQ,EAAE,CAAC,AAAD,CACnD,CACJ,EAAG,IACP,CACJ,CAEA,eAAe,MAAM,CAAC,eAAgB","sources":["<anon>","src/app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n    const slides = document.querySelector(\".slides\");\n    const slideCount = document.querySelectorAll(\".slide\").length;\n    const prevButton = document.querySelector(\".prev\");\n    const nextButton = document.querySelector(\".next\");\n    let currentIndex = 0;\n    function showSlide(index) {\n        const offset = -index * 100;\n        slides.style.transform = `translateX(${offset}vw)`;\n    }\n    function nextSlide() {\n        currentIndex = (currentIndex + 1) % slideCount;\n        showSlide(currentIndex);\n    }\n    function prevSlide() {\n        currentIndex = (currentIndex - 1 + slideCount) % slideCount;\n        showSlide(currentIndex);\n    }\n    // Botones de control\n    nextButton.addEventListener(\"click\", nextSlide);\n    prevButton.addEventListener(\"click\", prevSlide);\n    // Cambio automático cada 5 segundos\n    setInterval(nextSlide, 5000);\n    // Mostrar la primera slide\n    showSlide(currentIndex);\n});\nif ('loading' in HTMLImageElement.prototype) {\n    const images = document.querySelectorAll('img[loading=\"lazy\"]');\n    images.forEach((img)=>{\n        img.src = img.dataset.src;\n    });\n} else {\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js';\n    document.body.appendChild(script);\n}\n//LazyLoading del vídeo de YouTube\n/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */ class LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n        let playBtnEl = this.querySelector('.lyt-playbtn,.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = playBtnEl && playBtnEl.textContent.trim() || this.getAttribute('playlabel') || 'Play';\n        this.dataset.title = this.getAttribute('title') || \"\";\n        /**\r\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         */ if (!this.style.backgroundImage) {\n            this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\n            this.upgradePosterImage();\n        }\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            // Include the mispelled 'lty-' in case it's still being used. https://github.com/paulirish/lite-youtube-embed/issues/65\n            playBtnEl.classList.add('lyt-playbtn', 'lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n        this.addNoscriptIframe();\n        // for the PE pattern, change anchor's semantics to button\n        if (playBtnEl.nodeName === 'A') {\n            playBtnEl.removeAttribute('href');\n            playBtnEl.setAttribute('tabindex', '0');\n            playBtnEl.setAttribute('role', 'button');\n            // fake button needs keyboard help\n            playBtnEl.addEventListener('keydown', (e)=>{\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    this.activate();\n                }\n            });\n        }\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {\n            once: true\n        });\n        this.addEventListener('focusin', LiteYTEmbed.warmConnections, {\n            once: true\n        });\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', this.activate);\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n        this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n    }\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */ static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) linkEl.as = as;\n        document.head.append(linkEl);\n    }\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */ static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n        LiteYTEmbed.preconnected = true;\n    }\n    fetchYTPlayerApi() {\n        if (window.YT || window.YT && window.YT.Player) return;\n        this.ytApiPromise = new Promise((res, rej)=>{\n            var el = document.createElement('script');\n            el.src = 'https://www.youtube.com/iframe_api';\n            el.async = true;\n            el.onload = (_)=>{\n                YT.ready(res);\n            };\n            el.onerror = rej;\n            this.append(el);\n        });\n    }\n    /** Return the YT Player API instance. (Public L-YT-E API) */ async getYTPlayer() {\n        if (!this.playerPromise) await this.activate();\n        return this.playerPromise;\n    }\n    async addYTPlayerIframe() {\n        this.fetchYTPlayerApi();\n        await this.ytApiPromise;\n        const videoPlaceholderEl = document.createElement('div');\n        this.append(videoPlaceholderEl);\n        const paramsObj = Object.fromEntries(this.getParams().entries());\n        this.playerPromise = new Promise((resolve)=>{\n            let player = new YT.Player(videoPlaceholderEl, {\n                width: '100%',\n                videoId: this.videoId,\n                playerVars: paramsObj,\n                events: {\n                    'onReady': (event)=>{\n                        event.target.playVideo();\n                        resolve(player);\n                    }\n                }\n            });\n        });\n    }\n    // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\n    addNoscriptIframe() {\n        const iframeEl = this.createBasicIframe();\n        const noscriptEl = document.createElement('noscript');\n        // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\n        noscriptEl.innerHTML = iframeEl.outerHTML;\n        this.append(noscriptEl);\n    }\n    getParams() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n        params.append('playsinline', '1');\n        return params;\n    }\n    async activate() {\n        if (this.classList.contains('lyt-activated')) return;\n        this.classList.add('lyt-activated');\n        if (this.needsYTApi) return this.addYTPlayerIframe(this.getParams());\n        const iframeEl = this.createBasicIframe();\n        this.append(iframeEl);\n        // Set focus for a11y\n        iframeEl.focus();\n    }\n    createBasicIframe() {\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;\n        return iframeEl;\n    }\n    /**\r\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\r\n     * poster image to a higher resolution one, if it's available.\r\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\r\n     * because getting _an_ image in front of the user if our first priority.\r\n     *\r\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\r\n     */ upgradePosterImage() {\n        // Defer to reduce network contention.\n        setTimeout(()=>{\n            const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;\n            const img = new Image();\n            img.fetchPriority = 'low'; // low priority to reduce network contention\n            img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\n            img.src = webpUrl;\n            img.onload = (e)=>{\n                // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\n                // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\n                // … per \"annoying yt 404 behavior\" in the .md\n                const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\n                if (noAvailablePoster) return;\n                this.style.backgroundImage = `url(\"${webpUrl}\")`;\n            };\n        }, 100);\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n\n//# sourceMappingURL=index.699436b6.js.map\n","document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const slides = document.querySelector(\".slides\");\r\n    const slideCount = document.querySelectorAll(\".slide\").length;\r\n    const prevButton = document.querySelector(\".prev\");\r\n    const nextButton = document.querySelector(\".next\");\r\n    let currentIndex = 0;\r\n\r\n    function showSlide(index) {\r\n        const offset = -index * 100;\r\n        slides.style.transform = `translateX(${offset}vw)`;\r\n    }\r\n\r\n    function nextSlide() {\r\n        currentIndex = (currentIndex + 1) % slideCount;\r\n        showSlide(currentIndex);\r\n    }\r\n\r\n    function prevSlide() {\r\n        currentIndex = (currentIndex - 1 + slideCount) % slideCount;\r\n        showSlide(currentIndex);\r\n    }\r\n\r\n    // Botones de control\r\n    nextButton.addEventListener(\"click\", nextSlide);\r\n    prevButton.addEventListener(\"click\", prevSlide);\r\n\r\n    // Cambio automático cada 5 segundos\r\n    setInterval(nextSlide, 5000);\r\n\r\n    // Mostrar la primera slide\r\n    showSlide(currentIndex);\r\n});\r\n\r\n\r\n\r\nif ('loading' in HTMLImageElement.prototype) {\r\n    const images = document.querySelectorAll('img[loading=\"lazy\"]');\r\n    images.forEach(img => {\r\n      img.src = img.dataset.src;\r\n    });\r\n  } else {\r\n    const script = document.createElement('script');\r\n    script.src =\r\n      'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js';\r\n    document.body.appendChild(script);\r\n  }\r\n\r\n\r\n//LazyLoading del vídeo de YouTube\r\n\r\n/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */\r\nclass LiteYTEmbed extends HTMLElement {\r\n    connectedCallback() {\r\n        this.videoId = this.getAttribute('videoid');\r\n\r\n        let playBtnEl = this.querySelector('.lyt-playbtn,.lty-playbtn');\r\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\r\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\r\n\r\n        this.dataset.title = this.getAttribute('title') || \"\";\r\n\r\n        /**\r\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         */\r\n        if (!this.style.backgroundImage) {\r\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\r\n          this.upgradePosterImage();\r\n        }\r\n\r\n        // Set up play button, and its visually hidden label\r\n        if (!playBtnEl) {\r\n            playBtnEl = document.createElement('button');\r\n            playBtnEl.type = 'button';\r\n            // Include the mispelled 'lty-' in case it's still being used. https://github.com/paulirish/lite-youtube-embed/issues/65\r\n            playBtnEl.classList.add('lyt-playbtn', 'lty-playbtn');\r\n            this.append(playBtnEl);\r\n        }\r\n        if (!playBtnEl.textContent) {\r\n            const playBtnLabelEl = document.createElement('span');\r\n            playBtnLabelEl.className = 'lyt-visually-hidden';\r\n            playBtnLabelEl.textContent = this.playLabel;\r\n            playBtnEl.append(playBtnLabelEl);\r\n        }\r\n\r\n        this.addNoscriptIframe();\r\n\r\n        // for the PE pattern, change anchor's semantics to button\r\n        if(playBtnEl.nodeName === 'A'){\r\n            playBtnEl.removeAttribute('href');\r\n            playBtnEl.setAttribute('tabindex', '0');\r\n            playBtnEl.setAttribute('role', 'button');\r\n            // fake button needs keyboard help\r\n            playBtnEl.addEventListener('keydown', e => {\r\n                if( e.key === 'Enter' || e.key === ' ' ){\r\n                    e.preventDefault();\r\n                    this.activate();\r\n                }\r\n            });\r\n        }\r\n\r\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\r\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\r\n        this.addEventListener('focusin', LiteYTEmbed.warmConnections, {once: true});\r\n\r\n        // Once the user clicks, add the real iframe and drop our play button\r\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\r\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\r\n        this.addEventListener('click', this.activate);\r\n\r\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\r\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\r\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\r\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\r\n        this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\r\n    }\r\n\r\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */\r\n    static addPrefetch(kind, url, as) {\r\n        const linkEl = document.createElement('link');\r\n        linkEl.rel = kind;\r\n        linkEl.href = url;\r\n        if (as) {\r\n            linkEl.as = as;\r\n        }\r\n        document.head.append(linkEl);\r\n    }\r\n\r\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */\r\n    static warmConnections() {\r\n        if (LiteYTEmbed.preconnected) return;\r\n\r\n        // The iframe document and most of its subresources come right off youtube.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\r\n        // The botguard script is fetched off from google.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\r\n\r\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\r\n\r\n        LiteYTEmbed.preconnected = true;\r\n    }\r\n\r\n    fetchYTPlayerApi() {\r\n        if (window.YT || (window.YT && window.YT.Player)) return;\r\n\r\n        this.ytApiPromise = new Promise((res, rej) => {\r\n            var el = document.createElement('script');\r\n            el.src = 'https://www.youtube.com/iframe_api';\r\n            el.async = true;\r\n            el.onload = _ => {\r\n                YT.ready(res);\r\n            };\r\n            el.onerror = rej;\r\n            this.append(el);\r\n        });\r\n    }\r\n\r\n    /** Return the YT Player API instance. (Public L-YT-E API) */\r\n    async getYTPlayer() {\r\n        if(!this.playerPromise) {\r\n            await this.activate();\r\n        }\r\n\r\n        return this.playerPromise;\r\n    }\r\n\r\n    async addYTPlayerIframe() {\r\n        this.fetchYTPlayerApi();\r\n        await this.ytApiPromise;\r\n\r\n        const videoPlaceholderEl = document.createElement('div')\r\n        this.append(videoPlaceholderEl);\r\n\r\n        const paramsObj = Object.fromEntries(this.getParams().entries());\r\n\r\n        this.playerPromise = new Promise(resolve => {\r\n            let player = new YT.Player(videoPlaceholderEl, {\r\n                width: '100%',\r\n                videoId: this.videoId,\r\n                playerVars: paramsObj,\r\n                events: {\r\n                    'onReady': event => {\r\n                        event.target.playVideo();\r\n                        resolve(player);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\r\n    addNoscriptIframe() {\r\n        const iframeEl = this.createBasicIframe();\r\n        const noscriptEl = document.createElement('noscript');\r\n        // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\r\n        noscriptEl.innerHTML = iframeEl.outerHTML;\r\n        this.append(noscriptEl);\r\n    }\r\n\r\n    getParams() {\r\n        const params = new URLSearchParams(this.getAttribute('params') || []);\r\n        params.append('autoplay', '1');\r\n        params.append('playsinline', '1');\r\n        return params;\r\n    }\r\n\r\n    async activate(){\r\n        if (this.classList.contains('lyt-activated')) return;\r\n        this.classList.add('lyt-activated');\r\n\r\n        if (this.needsYTApi) {\r\n            return this.addYTPlayerIframe(this.getParams());\r\n        }\r\n\r\n        const iframeEl = this.createBasicIframe();\r\n        this.append(iframeEl);\r\n\r\n        // Set focus for a11y\r\n        iframeEl.focus();\r\n    }\r\n\r\n    createBasicIframe(){\r\n        const iframeEl = document.createElement('iframe');\r\n        iframeEl.width = 560;\r\n        iframeEl.height = 315;\r\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\r\n        iframeEl.title = this.playLabel;\r\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\r\n        iframeEl.allowFullscreen = true;\r\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\r\n        // https://stackoverflow.com/q/64959723/89484\r\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;\r\n        return iframeEl;\r\n    }\r\n\r\n    /**\r\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\r\n     * poster image to a higher resolution one, if it's available.\r\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\r\n     * because getting _an_ image in front of the user if our first priority.\r\n     *\r\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\r\n     */\r\n    upgradePosterImage() {\r\n         // Defer to reduce network contention.\r\n        setTimeout(() => {\r\n            const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;\r\n            const img = new Image();\r\n            img.fetchPriority = 'low'; // low priority to reduce network contention\r\n            img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\r\n            img.src = webpUrl;\r\n            img.onload = e => {\r\n                // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\r\n                // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\r\n                // … per \"annoying yt 404 behavior\" in the .md\r\n                const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\r\n                if (noAvailablePoster) return;\r\n\r\n                this.style.backgroundImage = `url(\"${webpUrl}\")`;\r\n            }\r\n        }, 100);\r\n    }\r\n}\r\n// Register custom element\r\ncustomElements.define('lite-youtube', LiteYTEmbed);\r\n\r\n"],"names":["document","addEventListener","slides","querySelector","slideCount","querySelectorAll","length","prevButton","nextButton","currentIndex","showSlide","index","style","transform","nextSlide","setInterval","HTMLImageElement","prototype","images","forEach","img","src","dataset","script","createElement","body","appendChild","LiteYTEmbed","HTMLElement","connectedCallback","videoId","getAttribute","playBtnEl","playLabel","textContent","trim","title","backgroundImage","upgradePosterImage","type","classList","add","append","playBtnLabelEl","className","addNoscriptIframe","nodeName","removeAttribute","setAttribute","e","key","preventDefault","activate","warmConnections","once","needsYTApi","hasAttribute","navigator","vendor","includes","userAgent","addPrefetch","kind","url","as","linkEl","rel","href","head","preconnected","fetchYTPlayerApi","window","YT","Player","ytApiPromise","Promise","res","rej","el","async","onload","_","ready","onerror","getYTPlayer","playerPromise","addYTPlayerIframe","videoPlaceholderEl","paramsObj","Object","fromEntries","getParams","entries","resolve","player","width","playerVars","events","event","target","playVideo","iframeEl","createBasicIframe","noscriptEl","innerHTML","outerHTML","params","URLSearchParams","contains","focus","height","allow","allowFullscreen","encodeURIComponent","toString","setTimeout","webpUrl","Image","fetchPriority","referrerpolicy","naturalHeight","naturalWidth","customElements","define"],"version":3,"file":"index.699436b6.js.map"}