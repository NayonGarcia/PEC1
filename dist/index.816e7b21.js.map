{"mappings":"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","sources":["src/app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const slides = document.querySelector(\".slides\");\r\n    const slideCount = document.querySelectorAll(\".slide\").length;\r\n    const prevButton = document.querySelector(\".prev\");\r\n    const nextButton = document.querySelector(\".next\");\r\n    let currentIndex = 0;\r\n\r\n    function showSlide(index) {\r\n        const offset = -index * 100;\r\n        slides.style.transform = `translateX(${offset}vw)`;\r\n    }\r\n\r\n    function nextSlide() {\r\n        currentIndex = (currentIndex + 1) % slideCount;\r\n        showSlide(currentIndex);\r\n    }\r\n\r\n    function prevSlide() {\r\n        currentIndex = (currentIndex - 1 + slideCount) % slideCount;\r\n        showSlide(currentIndex);\r\n    }\r\n\r\n    // Botones de control\r\n    nextButton.addEventListener(\"click\", nextSlide);\r\n    prevButton.addEventListener(\"click\", prevSlide);\r\n\r\n    // Cambio automático cada 5 segundos\r\n    setInterval(nextSlide, 5000);\r\n\r\n    // Mostrar la primera slide\r\n    showSlide(currentIndex);\r\n});\r\n\r\n\r\n\r\nif ('loading' in HTMLImageElement.prototype) {\r\n    const images = document.querySelectorAll('img[loading=\"lazy\"]');\r\n    images.forEach(img => {\r\n      img.src = img.dataset.src;\r\n    });\r\n  } else {\r\n    const script = document.createElement('script');\r\n    script.src =\r\n      'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js';\r\n    document.body.appendChild(script);\r\n  }\r\n\r\n\r\n//LazyLoading del vídeo de YouTube\r\n\r\n/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */\r\nclass LiteYTEmbed extends HTMLElement {\r\n    connectedCallback() {\r\n        this.videoId = this.getAttribute('videoid');\r\n\r\n        let playBtnEl = this.querySelector('.lyt-playbtn,.lty-playbtn');\r\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\r\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\r\n\r\n        this.dataset.title = this.getAttribute('title') || \"\";\r\n\r\n        /**\r\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         */\r\n        if (!this.style.backgroundImage) {\r\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\r\n          this.upgradePosterImage();\r\n        }\r\n\r\n        // Set up play button, and its visually hidden label\r\n        if (!playBtnEl) {\r\n            playBtnEl = document.createElement('button');\r\n            playBtnEl.type = 'button';\r\n            // Include the mispelled 'lty-' in case it's still being used. https://github.com/paulirish/lite-youtube-embed/issues/65\r\n            playBtnEl.classList.add('lyt-playbtn', 'lty-playbtn');\r\n            this.append(playBtnEl);\r\n        }\r\n        if (!playBtnEl.textContent) {\r\n            const playBtnLabelEl = document.createElement('span');\r\n            playBtnLabelEl.className = 'lyt-visually-hidden';\r\n            playBtnLabelEl.textContent = this.playLabel;\r\n            playBtnEl.append(playBtnLabelEl);\r\n        }\r\n\r\n        this.addNoscriptIframe();\r\n\r\n        // for the PE pattern, change anchor's semantics to button\r\n        if(playBtnEl.nodeName === 'A'){\r\n            playBtnEl.removeAttribute('href');\r\n            playBtnEl.setAttribute('tabindex', '0');\r\n            playBtnEl.setAttribute('role', 'button');\r\n            // fake button needs keyboard help\r\n            playBtnEl.addEventListener('keydown', e => {\r\n                if( e.key === 'Enter' || e.key === ' ' ){\r\n                    e.preventDefault();\r\n                    this.activate();\r\n                }\r\n            });\r\n        }\r\n\r\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\r\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\r\n        this.addEventListener('focusin', LiteYTEmbed.warmConnections, {once: true});\r\n\r\n        // Once the user clicks, add the real iframe and drop our play button\r\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\r\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\r\n        this.addEventListener('click', this.activate);\r\n\r\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\r\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\r\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\r\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\r\n        this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\r\n    }\r\n\r\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */\r\n    static addPrefetch(kind, url, as) {\r\n        const linkEl = document.createElement('link');\r\n        linkEl.rel = kind;\r\n        linkEl.href = url;\r\n        if (as) {\r\n            linkEl.as = as;\r\n        }\r\n        document.head.append(linkEl);\r\n    }\r\n\r\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */\r\n    static warmConnections() {\r\n        if (LiteYTEmbed.preconnected) return;\r\n\r\n        // The iframe document and most of its subresources come right off youtube.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\r\n        // The botguard script is fetched off from google.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\r\n\r\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\r\n\r\n        LiteYTEmbed.preconnected = true;\r\n    }\r\n\r\n    fetchYTPlayerApi() {\r\n        if (window.YT || (window.YT && window.YT.Player)) return;\r\n\r\n        this.ytApiPromise = new Promise((res, rej) => {\r\n            var el = document.createElement('script');\r\n            el.src = 'https://www.youtube.com/iframe_api';\r\n            el.async = true;\r\n            el.onload = _ => {\r\n                YT.ready(res);\r\n            };\r\n            el.onerror = rej;\r\n            this.append(el);\r\n        });\r\n    }\r\n\r\n    /** Return the YT Player API instance. (Public L-YT-E API) */\r\n    async getYTPlayer() {\r\n        if(!this.playerPromise) {\r\n            await this.activate();\r\n        }\r\n\r\n        return this.playerPromise;\r\n    }\r\n\r\n    async addYTPlayerIframe() {\r\n        this.fetchYTPlayerApi();\r\n        await this.ytApiPromise;\r\n\r\n        const videoPlaceholderEl = document.createElement('div')\r\n        this.append(videoPlaceholderEl);\r\n\r\n        const paramsObj = Object.fromEntries(this.getParams().entries());\r\n\r\n        this.playerPromise = new Promise(resolve => {\r\n            let player = new YT.Player(videoPlaceholderEl, {\r\n                width: '100%',\r\n                videoId: this.videoId,\r\n                playerVars: paramsObj,\r\n                events: {\r\n                    'onReady': event => {\r\n                        event.target.playVideo();\r\n                        resolve(player);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\r\n    addNoscriptIframe() {\r\n        const iframeEl = this.createBasicIframe();\r\n        const noscriptEl = document.createElement('noscript');\r\n        // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\r\n        noscriptEl.innerHTML = iframeEl.outerHTML;\r\n        this.append(noscriptEl);\r\n    }\r\n\r\n    getParams() {\r\n        const params = new URLSearchParams(this.getAttribute('params') || []);\r\n        params.append('autoplay', '1');\r\n        params.append('playsinline', '1');\r\n        return params;\r\n    }\r\n\r\n    async activate(){\r\n        if (this.classList.contains('lyt-activated')) return;\r\n        this.classList.add('lyt-activated');\r\n\r\n        if (this.needsYTApi) {\r\n            return this.addYTPlayerIframe(this.getParams());\r\n        }\r\n\r\n        const iframeEl = this.createBasicIframe();\r\n        this.append(iframeEl);\r\n\r\n        // Set focus for a11y\r\n        iframeEl.focus();\r\n    }\r\n\r\n    createBasicIframe(){\r\n        const iframeEl = document.createElement('iframe');\r\n        iframeEl.width = 560;\r\n        iframeEl.height = 315;\r\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\r\n        iframeEl.title = this.playLabel;\r\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\r\n        iframeEl.allowFullscreen = true;\r\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\r\n        // https://stackoverflow.com/q/64959723/89484\r\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;\r\n        return iframeEl;\r\n    }\r\n\r\n    /**\r\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\r\n     * poster image to a higher resolution one, if it's available.\r\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\r\n     * because getting _an_ image in front of the user if our first priority.\r\n     *\r\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\r\n     */\r\n    upgradePosterImage() {\r\n         // Defer to reduce network contention.\r\n        setTimeout(() => {\r\n            const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;\r\n            const img = new Image();\r\n            img.fetchPriority = 'low'; // low priority to reduce network contention\r\n            img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\r\n            img.src = webpUrl;\r\n            img.onload = e => {\r\n                // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\r\n                // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\r\n                // … per \"annoying yt 404 behavior\" in the .md\r\n                const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\r\n                if (noAvailablePoster) return;\r\n\r\n                this.style.backgroundImage = `url(\"${webpUrl}\")`;\r\n            }\r\n        }, 100);\r\n    }\r\n}\r\n// Register custom element\r\ncustomElements.define('lite-youtube', LiteYTEmbed);\r\n\r\n"],"names":[],"version":3,"file":"index.816e7b21.js.map","sourceRoot":"/__parcel_source_root/"}